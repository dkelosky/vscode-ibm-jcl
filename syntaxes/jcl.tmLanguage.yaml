---
"$schema": https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json

# https://macromates.com/manual/en/language_grammars#naming-conventions
# https://macromates.com/manual/en/appendix#property-list-format
# https://github.com/PanAeon/vscode-tmgrammar-test
# https://srinimf.com/2017/12/08/jcl-three-popular-ideas-to-continuation/

name: Job Control Language
patterns:
  - include: "#jcl_syntax"
repository:
  jcl_syntax:
    patterns:
      # The first found match applies.  For example, if line matches on `#lineTooLong`,
      # it's highlighting attributes are set.
      - include: "#lineTooLong"
      - include: "#lineComment"
      - include: "#parseLine"
      - include: "#jclLineStart"

  additionaljclHighlight:
    patterns:
      - include: "#operators"
      - include: "#numbers"
      - include: "#variables"

  #
  # Handles basic syntax error cases
  #
  lineTooLong:
    # TODO(Kelosky): this probably isn't true for all JCL, especially for //SYSIN
    # content sent through z/OSMF.
    patterns:
      - name: invalid.illegal.jcl #red
        match: ^.{81,}

  #
  # Handle comments - all statements that have a `//*` in column 1
  #
  lineComment:
    patterns:
      # First, if `//*` and 69 characters follow and 8 more treat as comment and sequence
      - match: (\/\/\*.{69,69})(.*)
        name: comment.line.double-slash.jcl #green
        captures:
          1:
            name: comment.line.double-slash.jcl
          2:
            patterns:
              - include: "#sequenceNumbers"
      # Else, treat entire line as comment
      - match: \/\/\*.*
        name: comment.line.double-slash.jcl

  #
  # Handle a line with and without sequence numbers
  #
  parseLine:
    patterns:
      # parse off line of JCL and sequence numbers
      - match: (.{72,72})(.{0,8})
        captures:
          1:
            # line of JCL
            patterns:
              - include: "#jclLineStart"
          2:
            # sequence numbers
            patterns:
              - include: "#sequenceNumbers"

  #
  # Handle a line of JCL which may have some span over multiple lines
  #
  jclLineStart:
    patterns:
      - include: "#inlineDD"
      - include: "#conditionals"
      - include: "#continuation"
      - include: "#jclLineReuse"

  #
  # Here is where we cannot scan to span multiple lines
  #
  jclLineReuse:
    patterns:
      - match: ([^*]\S*)?\s+(.*)
        captures:
          1:
            # The label for a line.
            patterns:
              - include: "#labels"
          2:
            # The statement
            patterns:
              - include: "#jclStatement"

  #
  # Handle inline DD
  #
  inlineDD:
    patterns:
      # Match DD * and parms
      - begin: ([^*]\S*)?\s+(DD\s+\*\S*?)\s(.*)
        # end with /* (default delimiter or //)
        end: ((^\/\*)|(^\/\/\s+$)|(^\/\/(?!\*).*?$)|(^\/\/\*.*$))(.*)
        beginCaptures:
          1:
            # name: entity.name.function.jcl
            patterns:
              - include: "#labels"
          2:
            name: keyword.other.jcl
          3:
            name: comment.line.double-slash.jcl
        endCaptures:
          2:
            patterns:
              - include: "#labels"
          3:
            patterns:
              - include: "#labels"
          4:
            patterns:
              - include: "#jclLineReuse"
          5:
            name: comment.line.double-slash.jcl
          6:
            name: comment.line.double-slash.jcl
        # contentName: string.regexp.jcl # red
        contentName: entity.name.type.jcl

  #
  # Handle IF THEN conditionals
  #
  conditionals:
    patterns:
      - match: ^([^*]\S*)?\s+(IF)\s+(.*)(THEN)\s+(.*)$
        captures:
          1:
            patterns:
              - include: "#labels"
          2:
            patterns:
              - include: "#conditional"
          3:
            patterns:
              - include: "#conditionalControl"
          4:
            patterns:
              - include: "#conditional"
          5:
            patterns:
              - include: "#comments"
      - begin: ^([^*]\S*)?\s+(IF)\s
        end: ^(\/\/)(.*)(THEN)\s+(.*)
        patterns:
          - include: "#conditionalLine"
        beginCaptures:
          1:
            patterns:
              - include: "#labels"
          2:
            patterns:
              - include: "#conditional"
          # 3:
          #   patterns:
          #     - include: "#conditional"
          # 3:
          #   patterns:
          #     - include: "#conditionalLine"
        endCaptures:
          1:
            patterns:
              - include: "#labels"
          2:
            patterns:
              - include: "#conditionalControl"
          3:
            patterns:
              - include: "#conditional"
          4:
            name: comment.line.double-slash.jcl

  #
  # Handle conditional line between begin and end
  # capture lines (when IF THEN spans more than 2 lines)
  #
  conditionalLine:
    patterns:
      - match: ^(\/\/)?(\s+)(.*)$
        captures:
          1:
            patterns:
              - include: "#labels"
          3:
            patterns:
              - include: "#conditionalControl"
      # matches between spanning IF ... THEN on the same line as IF
      - match: (\S+.*)$
        captures:
          1: 
            patterns:
              - include: "#conditionalControl"

  conditionalControl:
    patterns:
      # - include: "#additionaljclHighlight"
      # - include: "#operators"
      # - include: "#numbers"
      # - include: "#variables"
      - include: "#control"

  #
  # Handle continuation
  # - patterns include lines between `begin` and `end`
  # - End capture includes `jclArguments`
  #
  continuation:
    patterns:
      # begin and end of line regex assertions actually matter here
      - begin: ^(([^*]\S*)?\s+(\S+)\s+.*,)$
        end: (\/\/)(\s+)(\S+[^,]\s+.*)
        # patterns here must be an include and cannot
        # specify a direct match / name
        patterns:
          - include: "#jclLineContinued"
        beginCaptures:
          1:
            patterns:
              - include: "#jclLineReuse"
        endCaptures:
          1:
            patterns:
              - include: "#labels"
          3:
            patterns:
              - include: "#jclArguments"

        # it is not clear how contentName comes into play when
        # patterns are also used here.
        # contentName: invalid.illegal.jcl

  #
  # Line between begin and end continuation lines
  #
  jclLineContinued:
    patterns:
      - match: (\/\/)(\s+)(.*)
        captures:
          1:
            # The label for a line.
            patterns:
              - include: "#labels"
          3:
            # The statement
            patterns:
              - include: "#jclArguments"

  jclStatement:
    #  A simple source statement with 3 things. A statement,
    #  parameters, and comment
    patterns:
      - match: (\S+)\s*(.*)
        captures:
          1:
            name: keyword.other.jcl #darkblue
          2:
            patterns:
              - include: "#jclArguments"

  jclArguments:
    patterns:
      - include: "#stringType"
      # Handle no strings in statement
      - match: (\S*)(.*)
        captures:
          1:
            # This group refers to an statement operator
            name: keyword.control.jcl #purple
            patterns:
              - include: "#additionaljclHighlight"
          2:
            # The rest of the line is a comment.
            name: comment.line.double-slash.jcl

  variables:
    patterns:
      - match: ((?<!&)&|[%?])(.{,8}?)(\.?)((?=\W)|$)
        captures:
          1:
            name: punctuation.definition.variable
          2:
            name: variable.other.jcl
          3:
            name: punctuation.definition.variable

  stringType:
    patterns:
      - # Handle strings in an statement
        match: (\S*?)('.*?')(.*)
        captures:
          1:
            # This group refers to an statement operator
            name: keyword.control.jcl
            patterns:
              - include: "#additionaljclHighlight"
          2:
            #  A string was found, so we can't be sure this is the end of
            #  the line
            name: string.quoted.single.jcl
            patterns:
              - include: "#variables"
          3:
            # Recursively call this rule to get all patterns.
            patterns:
              - include: "#jclArguments"

  #
  # section for controlling textmate names (and colors)
  #

  ## Starts in column 1
  labels:
    # marks labels in the code
    match: .*
    name: entity.name.function.jcl # yellow

  # IF THEN ELSE ENDIF
  conditional:
    match: .*
    name: keyword.other.jcl # dark blue
  
  # controls between IF THEN ELSE
  control:
    match: .*
    name: variable.parameter.jcl

  # marks operators properly
  operators:
    match: "[=(),+]"
    name: keyword.operator.jcl # white

  # marks numbers properly
  numbers:
    match: (?<=[=(),*\s+])-?\d*(?=[=(),*+\s]|$)
    name: constant.numeric.jcl # light green

  # columns 72-80
  sequenceNumbers:
    match: .*
    name: constant.numeric.jcl # light green

  comments:
    match: .*
    name: comment.line.double-slash.jcl

scopeName: source.jcl

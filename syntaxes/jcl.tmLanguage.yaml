---
"$schema": https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json

# https://macromates.com/manual/en/language_grammars#naming-conventions
# https://www.apeth.com/nonblog/stories/textmatebundle.html

name: Job Control Language
patterns:
  - include: "#jcl_syntax"
repository:
  jcl_syntax:
    patterns:
      # first found match applies
      - include: "#lineTooLong"
      - include: "#lineComment"
      - include: "#parseLine"
      - include: "#jclArgumentLine"
      - include: "#jclLineStart"
  additionaljclHighlight:
    patterns:
      - include: "#labels"
      - include: "#operators"
      - include: "#numbers"
  lineTooLong:
    #  "TODO(Kelosky): This isn't true for JCL but will be fixed later...
    #  lines should only be 72 chars, at 73 the entire line should be in error"
    patterns:
      - name: invalid.illegal.jcl
        match: "^.{81,}"
  lineComment:
    # All statements that have a * in column 1
    patterns:
      - name: comment.line.double-slash.jcl
        match: "^(\\/\\/\\*.{68,68})(.*)"
        captures:
          "1":
            name: comment.line.double-slash.jcl
          "2":
            patterns:
              - match: ".(.{0,8})"
                captures:
                  "1":
                    # SEQUENCE NUMBERS!!!!!
                    patterns:
                      - include: "#sequenceNumbers"
      - name: comment.line.double-slash.jcl
        match: "\\/\\/\\*.*"
  parseLine:
    patterns:
      - # Continuation character that appears in column 72
        match: "^(.{72,72})(.{0,8})"
        captures:
          "1":
            # Allow syntax highlighting of the rest of the line
            patterns:
              - include: "#jclArgumentLine"
              - include: "#jclLineStart"
          "2":
            # SEQUENCE NUMBERS!!!!!
            patterns:
              - include: "#sequenceNumbers"
  jclLineStart:
    # The various parts of an assembler line
    patterns:
      - match: "^([^*]\\S*)?\\s+(.*)$"
        captures:
          "1":
            # The label for a line.
            name: entity.name.function.jcl
          "2":
            # The assembler instructions for this statement
            patterns:
              - include: "#jclInstruction"
  jclInstruction:
    #  A simple assembler source statement with 3 things. An instruction,
    #  parameters, and comment
    patterns:
      - match: "(\\S+)\\s*(.*)"
        captures:
          "1":
            name: keyword.other.jcl
          "2":
            patterns:
              - include: "#jclArguments"
  jclArgumentLine:
    #  This is for a line consisting of only an argument. This implies
    #  the previous line was a continuation
    patterns:
      - # A line matching this syntax should follow the argument syntax
        match: "^\\s+(\\S+=.*)$"
        captures:
          "1":
            patterns:
              - include: "#jclArguments"
  jclArguments:
    patterns:
      - include: "#stringType"
      # - include: "#quoteType"
      # Handle no strings in instruction
      - match: "(\\S*)(.*)"
        captures:
          "1":
            # This group refers to an instruction operator
            name: keyword.control.jcl
            patterns:
              - include: "#additionaljclHighlight"
          "2":
            # The rest of the line is a comment.
            name: comment.line.double-slash.jcl
      # If the current pattern starts with a space, then we should comment
      # the rest of the string
      - match: "\\s.*"
        name: comment.line.double-slash.jcl
  stringType:
    patterns:
      - # Handle strings in an instruction
        match: "(\\S*?)('.*?')(.*)"
        captures:
          "1":
            # This group refers to an instruction operator
            name: keyword.control.jcl
            patterns:
              - include: "#additionaljclHighlight"
          "2":
            #  A string was found, so we can't be sure this is the end of
            #  the line
            name: string.quoted.single.jcl
          "3":
            # Recursively call this rule to get all patterns.
            patterns:
              - include: "#jclArguments"
  # quoteType:
  #   patterns:
  #     - # Handle a length instruction
  #       match: "(\\S*?)([LKNT]')(.*)"
  #       captures:
  #         "1":
  #           # This group refers to an instruction operator
  #           name: keyword.control.jcl
  #           patterns:
  #             - include: "#additionaljclHighlight"
  #         "2":
  #           # Highlight the L' operator as a type
  #           name: support.type.jcl
  #         "3":
  #           # Recursively call this rule to get all patterns.
  #           patterns:
  #             - include: "#jclArguments"
  labels:
    # marks special labels in the code
    match: "[*]"
    name: support.function.jcl
  operators:
    # marks operators properly
    match: "[=(),+]"
    name: keyword.operator.jcl
  numbers:
    # marks numbers properly
    match: "(?<=[=(),*\\s+])-?\\d*(?=[=(),*+\\s]|$)"
    name: constant.numeric.jcl
  sequenceNumbers:
    name: constant.numeric.jcl
    match: ".*"
scopeName: source.jcl
